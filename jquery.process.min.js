/** jQueryProcess (https://github.com/nothrem/jQueryProcess) (c) 2015 */

(function($){if(!$){return;}
$.Process=function(init){$.ProcessFactory.call(this,{},init);};$.ProcessFactory=function(source,init){var process;if(this instanceof $.Process){process=this;}
else{process=new $.Process(init);process.promise(source);return process;}
var tuples=[["resolve","done",jQuery.Callbacks("once memory"),"resolved"],["reject","fail",jQuery.Callbacks("once memory"),"rejected"],["notify","progress",jQuery.Callbacks("memory")]],state="pending",promise={state:function(){return state;},always:function(){process.done(arguments).fail(arguments);return this;},promise:function(obj){source=obj!==null?jQuery.extend(obj,promise):promise;return source;},promiseWith:function(obj){return obj!=null?jQuery.extend(obj,promise):promise;}};jQuery.each(tuples,function(i,tuple){var list=tuple[2],stateString=tuple[3];promise[tuple[1]]=list.add;if(stateString){list.add(function(){state=stateString;},tuples[i^1][2].disable,tuples[2][2].lock);}
process[tuple[0]]=function(){process[tuple[0]+"With"](source,arguments);return this;};process[tuple[0]+"With"]=list.fireWith;});promise.promise(process);promise.promise(source!==null?source:{});if(init){init.call(process,process);}
return process;};})(window.jQuery);
